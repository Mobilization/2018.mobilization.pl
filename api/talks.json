{"talk-tbd":{"title":"TBD","description_html":"TBD","speakers_keys":[],"language":"EN"},"talk-finally":{"title":"Finally meeting","description_html":"Time to give thanks to all the sponsors and the organizer's team.","audience_level":"Advanced","language":"EN","speakers_keys":[]},"talk-hello-world":{"title":"Hello world!","description_html":"This is couple of words about Mobilization. For community by community.","audience_level":"Beginner","language":"EN","speakers_keys":[]},"talk-ui-profiling":{"title":"UI profiling in examples. Where is my bottleneck?","description_html":"You developed a feature, tested it yourself - everything works well. You send it to the internal testing, your managers... And they say it is slow!<br>Artur ran into the exact same situation and dug into the tools that may be used to make your Android app work on 60 frames per second. This presentation is intended for the people who haven't dived into the UI performance yet. You will see some examples of easy and fast ways to check if your app works well and if it is not, how to find the potential problem.<br>In the presentation, Artur will tell you about:<ul><li>How android renders views and why does it matter to you (DisplayLists, Choreographer, VSync, Render Thread - things that will be covered)<li>How to understand that you have a problem (GPU profiling, SysTrace)<li>How to get metrics about the current rendering speed (fps) of your app (dumpsys gfxinfo, Systrace, HierarchyViewer)<li>Some of their mistakes they made, how he found them and how he fixed them (overlaying Controllers (analog of Fragments), incorrect usage of RecyclerView with NestedScrollViewHow to easily find GPU overdraw and fix it (using GPU overdraw in dev settings and export view layers in HierarchyViewer or Scalpel to show you the ways to improve)<br>-How to be sure that the problem doesn’t regress (Android Vitals, dumpsys gfxinfo)</ul>","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-artur-badretdinov"]},"talk-kotlin-sandwich":{"title":"Making a Kotlin, Architecture Components, Rx and Coroutines sandwich","description_html":"Architecture keeps being a buzzword in the Android world, even though years have passed since we've seen the first version of the OS. Problems like orientation changes, navigation, data mapping, parsing or display are still around us, and we struggle to make them go away.<br>Using Kotlin and it's Coroutines, enveloping the application in Rx and finalizing it with Architecture Components, we can bring the end to nuisances that these problems cause. By heavily relying on generics, asynchronous programming and data persistance, we're able to make a solution, that fits most applications and has an understandable API.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-filip-babic"]},"talk-callbacks-hell":{"title":"If callbacks are hell, are coroutines the way to heaven?","description_html":"This talk will focus on use cases on Android, but most of it can perfectly be applied on other platforms.<br>While nearly all apps need to perform computations or I/O asynchronously, often off the UI thread (to avoid UI freezes on blocking calls), the solutions have never been straightforward. You could choose between AsyncTask, threads, executors or third-party java libraries, but couldn't avoid the callback hell. Coroutines which came in Kotlin 1.1 are changing this.<br>Kotlin coroutines allow to write code that reads like a good recipe, line by line, without jumps, yet, doesn't block the calling thread.<br>This talk will show how coroutines are relevant in many Android components (ViewModels, Jobs, Services, Activities/Fragments, Views…), for I/O, UI animations, Google Play Services Tasks API usage, and custom async logic.<br>But that's not all. I'll show you how you can take down any callback hell and do things you'd not have done before because it would have polluted your code base too much. You'll also see how Kotlin coroutines can help you handle errors more easily, and exhaustively.<br>Bluetooth Low Energy, a great callback hell example, can also get good with coroutines, and I'll show how I Made GATT Great Again! If you have some safe BLE devices we can connect to, please, bring them at the conference!<br>Camera2 has another big callback hell, plus a complex state machine, and I'll also show how to remove it with coroutines and other Kotlin language features!<br>What you'll learn here will enable you to better take advantage of coroutines features to solve complex problems and deal with hard or badly designed APIs you can't escape.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-louis-cad"]},"talk-kotlin-quality":{"title":"Kotlin on Code Quality Tools","description_html":"Some might have heard about code quality tools such as Checkstyle, PMD, Findbugs, Lint, Detekt and others but which ones are applicable to Kotlin?<br>I'll list a bunch of tools, explain what they can do, touch on how they work and most importantly show you how you can start using them to be more productive and save a lot of time.<br>With the help of these analyzers you can focus on coding conventions in your team, catch a few bugs and concentrate on what really matters when reviewing code.","audience_level":"Beginner","language":"EN","speakers_keys":["speaker-niklas-baudy"]},"talk-dependency-injection":{"title":"Sharing Code between iOS & Android with Rust","description_html":"When having to share code between iOS and Android, most companies choose C++. It is a well known language with very good tooling, but it also has a lot of pitfalls. For one, it is a very complex language. It also makes it really easy to accidentally introduce memory leaks or segmentation faults; especially if you're used to automatic memory management via a GC (Kotlin) or Arc (Swift). It also looks quite different from modern language like Swift or Kotlin. Now that we iOS developers got (mostly) rid of Objective-C, and Android Developers got (mostly) rid of Java, it feels archaic having to go back to a language with an archaic Syntax like C++.<br>Rust looks and feels a lot like Kotlin or Swift, and it offers the same easy ways of sharing code as C++. In addition to that, Rust has a very safe memory management model, high performance, a way to do fearless concurrency, and a very rich package ecosystem. As a bonus, it compiles to WebAssembly, so the shared code could also be used in any HTML5 app. At XING, we started some experiments in Rust in order to find out whether it would be useful to leverage it for code sharing. We're not using it in production yet or anything, but I feel like it would still be nice to introduce it to more developers so they can also start doing some experiments.","audience_level":"Beginner","language":"EN","speakers_keys":["speaker-benedikt-terhechte"]},"talk-green-rocket":{"title":"Living on a green rocket field","description_html":"At Google IO 2018 the Android team announced Jetpack for Android, which is an opinionated set of libraries and architecture, which is a recommendation for Android developers. We at LAB1886, the incubator for the Daimler AG (Mercedes Benz), thought to give it a try with our latest project called RaceScout from AMG. We have the luxury to work always on green fields for projects. So we wanted to share our experience with Jetpack and also give some recommendations for all the library & SDK developers.","audience_level":"Beginner","language":"EN","speakers_keys":["speaker-hasan-hosgel"]},"talk-idealistic-apps":{"title":"Writing idealistic apps","description_html":"This talk will learn you how to develop clean, maintainable and stable applications in Swift. It will also look at some examples of how I applied these methods in my work.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-joannis-orlandos"]},"talk-app-connected":{"title":"Is your app really connected?","description_html":"Today, almost every Android app communicates with a remote server through a provided API. We often forget that mobile applications can work offline. Moreover, network can be down or not connected to the Internet. We may also want to synchronize our data through the WiFi, but not through the mobile data transfer to save user's money. What to do, when connection is lost and someone is using an application at the same time? How can we keep the track of network or Internet connectivity changes in our app? How to deal with this problem across all recent Android versions? How to write an application, which is network aware and optimized to reduce power consumption? If you want to know answers to these questions and get rid of endlessly rolling spinners in your app, then this talk is for you.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-piotr-wittchen"]},"talk-machine-learning":{"title":"From TensorFlow to ML Kit: power your mobile application with machine learning","description_html":"As a mobile app developer, you probably have noticed Google's active efforts on bringing their machine learning expertise to mobile development. From TensorFlow's earliest mobile app demo to TensorFlow Lite and Android Neural Networks API, we are witnessing how latest research (e.g. MobileNet) drastically reduced machine learning model size and CPU / memory consumption on mobile devices. This year, with the beta release of ML Kit, we now have another powerful toolbox to leverage machine learning in the mobile application development.<br>This talk features a side project Magritte, an educational application that helps people learn foreign languages. It's sort of like Duolingo but with eyes, the application recognizes daily objects using custom machine learning models embedded on device and speaks the vocabulary out loud with the chosen language. By presenting the Magritte app, the talk will reveal how the models for TensorFlow mobile were initially trained and optimized, how the performance was improved with TensorFlow Lite and MobileNets models, and eventually the ongoing migration towards ML Kit.","audience_level":"Beginner","language":"EN","speakers_keys":["speaker-qian-jin"]},"talk-effective-tdd":{"title":"Effective TDD on Android with Kotlin","description_html":"After one year working with Kotlin in 5+ production Apps, it is time to show a TDD-based stack that made my development process more pleasant, and my life happier :-)","audience_level":"Advanced","language":"EN","speakers_keys":["speaker-olmo-gallegos"]},"talk-ios-performance":{"title":"Performance of Standard iOS Elements and Technologies","description_html":"We all know that autolayout comes with a performance hit, but how does it really compare to manual layout, especially with the improvements to the autolayout engine in iOS 12? And what’s a performant way to round the corners of an image? CoreText, UILabel, UITextView: how do all the different ways to draw text perform against each other? Let's discuss the performance differences between comparable iOS elements and technologies.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-janina-kutyn"]},"talk-koin-android":{"title":"Simplify your Android development with Koin","description_html":"In 2016, the Kotlin language has shaken the Android development landscape. It's now time to break the chains from the Java language and get the best of Kotlin.<br>Koin is a pragmatic dependency injection framework for Kotlin/Android developers. Let's see how it's very simple to take in hand and how it will make your life easier: from basic dependency injection to the Android architecture's components, without forgetting the testing part.","audience_level":"Beginner","language":"EN","speakers_keys":["speaker-arnaud-giuliani"]},"talk-offline-challenges":{"title":"The Challenges of Offline Work in Mobile","description_html":"Reliable internet connection can't be taken for granted on mobile devices. Therefore, when network is unavailable, mobile apps should either fail gracefully or be able to work offline.<br>However, offline work is one of the most challenging topics in mobile development. And it's not just about mobile: the entire system might need to be offline capable.<br>In this session we will discuss the fundamental challenges of offline work and understand what it takes to implement an offline capable apps.","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-vasiliy-zukanov"]},"talk-flutter-sdk":{"title":"Why is Flutter the mobile SDK developers deserve, but the also the one that they need right now?","description_html":"Flutter is an open-source mobile application development SDK created by Google. It is used to develop applications for Android and iOS by coding just once in Dart and deploying to both of these platforms. Flutter makes it so easy to build mobile apps without impacting the app’s performance. The app it produces is a treat for the eyes as everything is drawn right on the screen, pixel perfect!<br>“Why do I need this when I already have React Native?”. I got that covered in this talk for you along with the following takeaways:<br>Why coding twice is not productive anymore?<br>A brief about how Flutter came into existence<br>Flutter’s ability to keep the same performance as the native app<br>Comparison with React Native and other dual platform frameworks<br>Best resources to get started with Flutter<br>Fun Fact: Flutter was meant to use JS at first, but the team eventually decided to go with Dart. I’ll talk about this as well.<br>By the end of this talk, you will be itching to write your first app in Flutter!","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-rohan-taneja"]},"talk-crypt-ography":{"title":"Why? Because I can - the stories from the crypt(ography)","description_html":"Based on my CryptoSwift open source project experience, I'd like to outline the most frequent issues reported to the support. Programmers comes from various programming environments and uses various schemes, not always understanding what and why. Let's review the most common scenarios to approach encryption with Swift (but in general really)","audience_level":"Intermediate","language":"EN","speakers_keys":["speaker-marcin-krzyzanowski"]}}